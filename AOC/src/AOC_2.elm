module AOC_2 exposing (..)

import Debug exposing (todo)
import List.Extra as Le exposing (..)


xxx =
    "odpowiedz z aoc 2:       "


entryData : String
entryData =
    """
B Y
A Z
A Z
C Z
B Y
B Y
B X
B Z
C Z
B X
B Y
A Z
B Y
B Z
B Y
C Z
B Z
B Y
B Z
C Y
B Y
A Z
B Y
B Y
B Y
C Y
A Z
B Y
B X
A Z
B X
A Z
A Z
B Y
B Y
B X
A Z
B Y
B Z
C X
C X
B Y
B Y
B X
B X
C X
B X
A Z
B Y
B Y
C X
A Z
B Y
B Z
B X
B X
A Z
A X
B Y
B Y
B Z
C Z
B Z
B Z
B Z
A Z
A Z
B X
B X
B Y
B X
B X
C Z
C Z
A Z
A Y
A Z
B Z
A Z
B Y
C X
B X
C X
B Z
B Z
C Z
B Z
B X
C X
A Z
C X
B Z
A Y
C Z
B Y
C Y
B X
A X
B Y
B X
B X
B Z
B Y
A Z
B Z
B Y
B Y
A X
A Z
B X
B X
B X
B X
B Z
B Z
B Y
C X
A Z
A Z
B Y
B Z
B Y
A Z
B Z
A Z
A Z
C X
B Z
A Z
A Z
B Y
B Z
A Z
B Y
B Y
A Z
B Y
C X
B Z
B Y
B X
C X
B X
B X
B X
A Z
A Z
C Y
A Z
B Y
A Z
C X
B Z
B Z
C X
B Y
C X
B X
B X
C X
A Z
B Y
C X
B X
B Y
A Z
B Y
B Y
C X
B Y
C X
A Z
A Z
A Z
B Y
B Y
A X
A Z
A Z
B Y
C X
C Y
B Y
C X
A Z
B X
A Z
A Z
C X
B Y
A Z
B Y
C X
A Z
B X
B Y
A Z
B Y
B X
B X
C X
B Y
C Y
A Z
B Y
B Y
C Y
B Y
C Y
C X
A Y
A Y
B Z
B Y
A Z
B Z
B X
B X
B Y
A Z
B Y
B X
B Y
B Y
C Z
B Y
B Y
A Z
A Z
B Z
A Y
C X
B Y
B Y
B Z
B Z
B Y
C X
B Y
B X
B Z
B Y
B X
B Y
C Z
B Y
B X
A Z
B Z
B Z
A Z
C X
B Y
C Z
A Z
B Y
C Z
B Y
B X
B Y
B X
C Z
B Z
A Z
A Z
A Z
A X
B Z
B Y
B X
B Y
A Z
B Z
C Z
B X
B Z
B Z
A Z
B Y
B X
A Z
A Z
B Y
B X
A Z
A Z
C Z
A Z
C Z
B Y
B Y
B Z
C X
A Z
B X
B Y
B X
B Y
B Y
B X
B Z
B X
C Z
C X
C X
A Z
A Z
B X
B X
A Y
C X
B Y
A Y
B Z
B X
A Z
B X
B Y
B Y
B Y
B Y
A Z
A Z
B Y
B X
C Z
B Z
C X
B Z
B Y
C X
A Z
B Y
A Z
A Z
B Z
B Y
B X
A Z
B X
B Y
A Z
B Z
B X
B X
A Z
C Y
B X
A Z
B X
B Y
C X
B Y
C Z
C X
B Y
B Y
B Y
B X
B Y
B X
A Y
A Z
B Z
B Y
B X
B Z
B Y
C Z
B Y
A Z
B X
A Z
C X
A X
B Z
B Z
C X
A Z
B X
A Z
A Z
B Z
A Z
B Y
B Z
C Z
A Y
A Z
A Z
A Z
C X
B Z
B Z
B Y
B X
B Y
B Y
B Y
B Z
B Y
B Y
A Z
B Z
A Z
C X
B Y
B X
B Y
B X
B Y
B Y
C X
B Y
B Y
B Z
B Y
C X
B Y
B X
B Y
C X
A X
A Z
C Z
B Y
C Z
B X
C Z
C X
C Z
B Y
B Y
C X
C X
B Y
C X
A Y
B Y
B X
B X
B Z
B Y
C Y
C X
B X
B Y
B Z
B X
B Z
B Z
C X
B X
B Y
B Z
B X
C Z
A Y
B Y
B Y
B Y
A Y
C Y
B Y
B Z
B Z
B Y
B Y
B Z
B X
B X
B Y
A Z
C Y
C Z
B Y
B X
B Y
B Y
C X
B Y
C X
A Z
B X
C X
C Z
A Z
A Z
B Y
C X
A Z
A Z
B Y
A Y
B Y
A Z
A Z
B X
C X
A Z
B X
B Z
A Z
A Z
B X
B Y
B X
B Z
B Y
B Y
B Z
C X
C X
B Y
A Z
B X
B X
B Y
B Z
B Y
B X
B Z
B X
B Y
C X
B Y
B Y
C Y
A Z
B Y
B X
B Y
A Z
C X
A Z
A X
B Z
B X
A Z
B Y
B X
B X
A Z
B Y
A Z
B Z
B Y
A Z
B Y
B Y
A Z
B Z
C Z
B Y
B Y
C Y
A Z
B Y
B Y
B Y
B Y
B Z
B Y
B Y
B Y
C X
B Z
B X
A Z
B Z
C X
B Y
B Y
A Z
B Y
B X
A Z
A Z
C Z
B X
B X
B Y
B Z
B Z
B Z
B Y
B Y
B Y
B Y
B Z
B Y
A Z
A Y
A Z
B Y
B Y
A Z
B X
B Y
A Z
C Z
B Z
B Z
B Y
A Z
A Z
B Y
B X
B Z
B X
B Y
B Y
B X
C X
B Z
B X
A Z
B Y
C Z
B X
A Z
C Z
C Z
A Z
B Y
B Y
A Y
B Y
C Z
B X
C X
B Y
B X
B Z
B Y
B Z
B Y
B Y
A Z
B X
B X
A Y
B Z
B X
B Z
A Y
B Z
C X
B X
B X
B Z
B X
C Y
B Y
C X
C X
B Z
B X
C Z
B Z
A Z
C Y
B Y
B Y
B X
B Z
B Y
B Y
B X
C X
B Y
B Y
C Y
B Z
C X
A Z
B X
B X
B Z
B X
B Y
A Z
B Z
B X
A Z
B Y
C X
A Y
A Z
C X
B X
B Z
B X
C X
A Z
B X
B Y
B Y
A Z
B Z
C X
A Z
B Z
C X
B X
A Z
C X
C Z
B Y
B Z
B Y
B X
C Z
B Z
B Z
B Y
A Z
C Z
A Y
B Y
C X
B Y
B Z
A Z
B Z
A Z
B X
C X
B Y
A Z
B Y
B X
C Z
B Z
C X
B Y
B X
C Y
B Y
C X
B Y
B Y
B Y
B Z
B Y
B X
B Y
B Y
A Z
A Z
C X
B Z
B Y
A Z
B X
C X
B Y
B X
A Z
C Z
A Z
B Z
B Y
B X
B Z
B Y
A Z
C X
C Z
A Y
A Z
C X
C Y
C Z
B Y
B X
B Z
B Y
B X
B Y
A Z
B Y
C X
B X
B Y
C Z
B Y
B Y
B Y
B X
B Y
C Z
B X
B Y
B Y
B Z
B X
B X
B Z
B Z
A Z
A Z
C X
B Y
B Y
C X
B Y
B X
A Y
C Z
B Y
B Z
B Y
B Y
A Z
B Y
B Z
B Y
B Z
B X
B Z
B Y
A Z
B X
B Z
B Y
B Y
B Z
B Y
A Z
B X
B Y
B Z
B X
B Y
B X
B X
B Y
B X
C Y
B Z
B Y
B Z
C Y
A Z
B Y
A Z
B X
A Z
A Z
C Z
B X
C Y
A Z
B Z
B Z
B X
B Z
B Y
A Z
B Z
C Z
A Z
C Y
A Z
B Y
A Z
B Y
A Z
B X
A Z
B Z
C X
B Y
B Y
B Y
C X
B Z
C X
A Z
A Z
C X
B Y
B Z
B X
B Y
B X
A Z
B Y
B Y
A Z
B Y
B Z
B Z
B X
B Z
B Y
B X
B Y
B Y
C X
C Z
B Y
B Y
B Y
B Z
B Y
B Y
B Y
A Z
B Y
B X
B Y
B X
B Z
B Y
B X
B X
A Y
B Y
B X
B Y
B Y
B Y
B Z
B X
A Z
B Y
B Y
B Y
A Z
B X
B X
C Z
B Y
B Y
A Z
B Y
B Z
B X
C X
B Y
B Y
C X
C Z
B X
A Z
B Y
B Y
B X
B X
B X
B Y
B Y
A Z
A Z
B Y
B Y
A Z
B Z
A Z
C X
C X
B Y
B Y
A Z
A Z
C Z
B Z
B X
A Z
B X
B Y
B Y
B X
B Y
B Y
C Z
B Y
B X
C Z
C Z
B X
B Y
B Y
B Z
A Z
B Y
B Y
B Y
B X
B X
A Z
A Z
B X
B Y
B Z
B Y
B Z
B Y
B Z
C X
B Y
C X
B Y
B Y
C Y
A Z
B X
C Z
B Y
B Z
B Y
B Y
B Y
C X
B X
B Y
A Z
C Y
B Y
A Z
B Y
B Z
B Z
B Y
B Y
B Y
C X
B Y
A Y
C Y
B X
B X
B X
B X
B Z
B X
B Z
B Y
B Y
A Z
B X
B X
A Z
A Y
B Y
B Z
B Y
C X
B Y
B X
B Z
C X
B Z
B Y
B X
B X
A Z
B Y
B Y
B Y
C X
A X
B X
C X
B X
C X
B X
A X
B Y
B Y
B Y
B Y
B Z
C Y
C X
A Z
B Z
B Z
B Y
B Z
B Y
B Y
B X
B Z
A Z
A Z
B Z
B X
B Z
A Z
B Y
B Y
B Y
B Z
A Y
B X
B Z
B Y
B Y
B Y
B Y
C X
B Z
C X
A Z
A Z
B Z
A Y
C X
B X
B X
C X
A Z
A Z
A Z
B Y
B Z
A X
A X
B Y
C X
A Z
B Z
A Z
B Y
B Y
B X
B X
B Y
C X
B Z
B Y
B X
B X
B Y
B Z
B Y
B Y
B X
B X
B X
B Y
C X
B Y
B Y
B X
B Y
B Y
B X
B X
A Z
C X
B X
A Z
B Y
B Y
B Z
B Y
B X
A Z
C Y
B X
B Z
B Y
C X
A Z
B X
A Z
A Z
B Y
B Z
B Y
A Z
B Y
B Z
A Z
C Z
B Y
B Y
B X
B Z
B Y
B X
B X
B Y
B Z
B X
B Y
C Z
A X
B Y
C X
A X
B X
B X
B Z
A X
B X
B Y
B X
A Z
B Z
C Z
B X
B X
A Z
B X
B X
B Z
B Y
B Y
A Z
B Y
B Y
B X
B X
B X
B Y
A Y
C X
B X
A Z
B X
B Y
C Z
B Y
B Y
A Z
B Y
A Z
B Y
A Z
B Y
B Y
A Z
B X
B X
B Y
B Y
B Y
A Z
B Y
B Y
A Z
B X
A X
A Z
B Y
B X
B Z
B Z
B Y
B Y
C Y
B Y
B Y
B X
B Y
A Z
C X
B Z
B X
B Z
A Z
B Y
B Z
B X
A Z
A Z
C X
B X
A Y
C X
B Z
B Z
C Z
B Z
B Z
C Y
A Z
C Z
A Z
C Z
B Z
B Y
C X
B Y
B X
A Z
C Y
B X
B Y
B Y
B X
B Y
A Z
A Z
B Y
B Z
B Y
C X
B X
B Y
B X
A Z
C X
B Y
B Y
B Y
B Y
C Z
B Y
C Z
A X
C Z
B X
B Y
B Y
B X
B Y
C X
C X
A Z
B Y
B Y
C X
B Z
C Y
B Z
B Z
B Z
B X
B X
B X
B Z
B X
C X
B Y
C X
B X
C Z
B Y
B X
B Z
B Y
B Y
B Y
B Y
B Y
B X
B X
A Z
B Y
B X
B Y
B Y
A Y
B Y
B Y
A Z
A Z
C Z
B X
B Y
B Y
B Z
C Z
C X
A Z
C X
A X
B X
B Z
B Y
A Z
C Z
B Y
C Z
B X
A Z
B X
A Z
B Y
A Y
B Y
B Y
A Z
C X
B X
B Y
A Z
B Z
B Y
B X
B X
C Y
B X
A Z
B Z
A Z
C X
C Y
B Z
B Z
A Z
B X
B Y
B X
C X
B Y
B Y
B X
C X
B X
B Y
B X
B Y
B Z
B Y
B X
B X
A Z
B Y
B Y
C X
C Y
C X
A Z
A Z
B X
B X
B Z
A Z
A Z
C Z
B Z
A X
B X
B Y
B Y
A Z
B Y
B X
B X
B X
B Y
B X
B Y
B Y
B Y
B Y
B Y
B Y
B Z
A Z
B Y
B X
C X
A Y
B Y
B Y
B Z
C Z
B X
C X
B Z
B Y
B Y
B X
B X
B X
A Z
B X
A Y
B Y
B Y
C X
A Z
B Y
C X
B Y
B X
B X
B X
C Z
B X
A Z
B Y
B Y
B Y
A Z
A Z
B X
A Y
B Y
B Y
B Y
B X
B X
B Z
B X
B Z
B X
B Y
A Y
A Z
C Y
B Z
C X
B Z
B Y
B X
A Y
B Y
B X
B Y
B X
C Z
B X
C Z
B Y
B X
B Z
A Y
A Y
C Z
B X
B X
B Y
A Z
B Y
B Z
A Z
B X
B X
B X
B X
B X
B Z
A Z
A Z
C Y
C X
A Z
A Z
C X
B X
B X
B Z
B X
A Z
B Y
B X
B Y
C X
A Z
B Z
C X
B Y
B Y
A Z
B Y
B Y
B X
B Y
C Y
B X
B Z
B Y
A Z
B Z
A Y
B Y
A Z
B X
B Y
A Z
B Y
C Z
B Z
B Y
C X
C X
B X
B Z
B Y
B Z
B Z
B Z
B Z
A Z
B Y
B X
B Z
B Y
B X
A Z
A Z
A Z
B Y
C Y
C Z
B Z
B X
B Y
B Z
B Y
A Z
A Z
C Z
B X
B Y
B Z
B X
A Y
A Y
B Y
A Y
B Z
B Y
A Z
B Y
B Y
B Y
C Z
B X
B Z
B X
B Y
B Y
B Y
C X
B X
B Y
B Z
B X
B Y
B Y
B Y
B X
B X
B X
A Z
B Y
B Y
C X
C X
C X
C X
B Z
A Z
A Z
B Z
B Y
B X
A Z
C Z
B Y
B X
C Z
C X
B X
B Y
B Y
B X
B X
B Y
A Z
B X
B X
B X
B Y
A Y
B X
A Z
B Y
B Y
B Y
C Y
B Z
B X
B Z
C X
B Y
B Z
C X
B X
B X
B Y
B Y
B Y
A Z
A Z
A Z
B Y
B X
C Z
B Z
B Y
B Y
B Y
B Y
B Z
C X
A Z
C Z
B Z
B X
B X
A Z
B X
B Z
A Z
B Y
B Y
A Z
B Y
B Y
C Y
C Z
B X
A Z
B Z
B Y
C Z
C X
B X
A Z
B Y
B Z
B X
A Z
A Z
A Z
B Y
B X
C X
B Z
B Z
B X
B X
B Y
A Z
B X
B X
B Z
A Z
C X
B X
B Y
B Z
A Z
B Y
B Y
B Y
C X
B Z
A Y
A Z
B Z
C X
A Z
A Z
B Y
C X
B Y
B Z
C X
B Y
B Y
A Z
B Z
A Z
C Z
A Z
B X
B Z
A Z
B X
B Y
C Z
A Y
B Y
B Y
B Y
A Z
B Z
A Y
A Z
B Z
B Y
B Y
A Y
B Y
C X
B Z
B Z
A Z
B X
B X
A Z
B Z
C Y
A Z
A Z
B Y
B Z
B X
C Y
B Y
B Y
B Z
B Y
B Z
B X
B X
B Y
B Y
C X
C X
B X
B X
C X
A Z
B Y
C Z
A Z
B X
B Y
B Z
A Z
C Y
A Z
B Z
A Z
C X
C X
B X
B X
B Y
B Y
B Y
B Y
B Z
B X
B Z
C Y
B Y
A Z
B Y
B X
A Y
B Y
B Z
C X
B X
A Z
A Z
B Y
B Y
A Z
C X
B X
B Y
B Y
B Z
A Z
A Z
C Z
A Z
B Y
B Y
B Y
A Z
B Z
B Y
A Z
A Y
B Y
B Y
B Z
A X
A Z
B Z
B X
A Z
B Z
B Y
B Y
B X
A Y
C Y
B Y
B Y
B X
B Z
A Z
B X
B X
B Y
B Y
A Z
B X
C X
B X
B X
A Z
B Y
C X
A Z
B X
C Z
A Z
B Y
B Y
B X
B X
A Z
C Z
B X
B X
B Y
A Z
B Y
B Y
B X
B Y
B X
A Z
B Y
B Z
B X
A Z
B Y
C Z
C X
A Z
A Y
B X
B Z
B Y
B Y
B Y
B Z
B Z
A Y
C X
B X
C X
B Y
B Y
B Z
B Y
C Y
C X
B Z
C X
B Y
B X
B Y
B Y
A Z
B Y
A Z
A Z
A Z
A Z
B Y
A Z
B X
B X
B X
C Z
B Z
C Y
B Y
A Z
B Z
B Y
B Y
B Y
A Z
B Z
C Y
C X
B Y
B Y
B Y
B X
B Y
B Z
A Z
B Y
B Y
C Y
B Z
B X
B Y
B X
B Z
B Y
C Y
C Y
A Z
B X
B X
A Y
B Z
A Z
B Y
B X
B X
B Z
B X
A Z
B Y
C X
C X
B Z
A Z
B Y
B Y
B Y
B Y
B Y
B X
B Y
B Y
B Z
B Z
A X
A Z
A Z
A Z
A Y
C X
B Y
B Z
B X
A Z
B Y
B Y
B X
B Y
B Y
C Y
C Y
B X
A Z
B Y
C X
B Y
A Y
B X
B X
B Y
C X
A Z
B Y
B X
C X
C Z
B Y
B Y
B Y
A Z
B X
A Z
C Z
B Z
B Y
B Y
B X
B Y
B Y
B X
A Z
C X
C Z
B X
B Y
C Y
B X
A Z
B Y
A Z
B Y
A Y
A Z
A Z
B Y
B Y
B Z
C Z
C X
B Y
B Z
B Y
A Z
B Y
B Z
B Y
B X
B Y
B Z
B Y
B Z
C X
B Y
B Y
C Z
A Z
B Y
C X
B X
A Y
B Y
A Z
B Y
B X
B Y
B Y
B X
B X
B X
B Y
B Y
C Z
B Z
C X
C Z
B Y
C X
B X
A Z
B Y
C Z
A Y
B Y
B Y
B Y
C X
B X
B Y
B Y
B Z
C X
B X
B Z
A Z
B X
B Z
B X
A Z
B Y
B Z
C X
B X
C X
B X
B Y
B Z
B Z
B Z
A Z
B Y
B X
B Y
B Y
B X
B Z
B Y
C X
A Z
B Z
B X
A Z
B Y
B Y
B Y
A Z
A Z
C X
B X
A Y
B Y
B Y
B Y
A Z
A Z
A Z
C Y
B Z
A Y
B Y
B X
B X
B Y
C X
B Y
C Z
B Y
A X
B Y
B X
B Y
B X
C Z
B Y
B Z
B X
B Z
A Z
B Y
B X
B Y
A Z
B X
C Y
B X
B Y
B Y
B Y
C X
B Y
B Y
B Y
A Z
B Z
C X
A Z
B Y
C Y
B X
A Z
C Z
B X
B Y
B X
C Z
B X
B Z
C Y
B X
B Y
B X
B Z
B X
B Z
B Y
B Z
B X
A Z
B X
A X
B X
B Y
B Y
B Y
A Z
B Y
B Y
B Z
C X
B Y
B Y
B Y
B X
B X
B X
C Z
B Z
B X
A Z
B Y
B Z
B Y
B Y
B Y
B Y
C X
A Z
B Z
B Y
B Y
B Z
A Z
B Y
B Z
B Y
B Y
C Y
A Z
B Z
C X
B X
C Z
B X
B X
B Y
B Y
A X
B Y
C Z
A Z
B X
C Z
C Z
B X
A Z
B X
C Z
B Z
B Y
B Y
C X
A Z
B X
B Y
B X
B X
B X
B Y
C X
B Z
B Y
B Y
B Y
B X
A Z
A Z
B Y
B Z
B Y
A Z
B Y
B X
A Z
B Z
B Y
B X
B Y
A Y
B Y
B Y
B Y
B Z
B X
B Y
C Z
C X
B Y
C Y
B Z
A Z
A Z
B Y
B Y
A Z
B Z
B Y
B X
A Z
A Z
C X
A Z
C X
A Z
B Y
C X
B X
B X
B Y
A Y
B Y
B Z
B X
B Y
B Y
A Z
B X
B Y
A Z
A Y
A Z
C X
A Z
C X
A X
B Y
B Y
A Z
B X
B Z
B Y
B Y
B Z
B Y
B Y
B X
B Y
C X
C X
B Y
B Y
B X
C Z
C Z
C Z
C X
B Y
C Z
A Z
C Z
B Y
A Z
B Z
B X
A Y
B Y
B Y
B X
B Y
B Y
C X
B Y
A Z
B Y
A Z
C Z
A Z
B Y
B Z
A Z
B X
B X
B Z
B X
B Y
A Z
B Y
C X
A Z
C Z
B X
A Z
B Y
B Y
C Z
B Z
A Z
B Y
B X
B Y
B Z
C Z
A Y
A Z
B X
B X
A Z
C Y
B Y
A X
A Z
B X
B Y
B X
A Z
C X
B Y
B Y
C X
A X
B Y
A Z
A Z
B Y
B Z
B Y
B Y
B Y
B X
B Y
B X
B X
B X
B Y
A Z
C X
A Z
A Z
A X
A Z
B X
B Z
B Y
A Z
"""


formatData : List (List Shape)
formatData =
    entryData
        |> String.trim
        |> String.words
        |> listShapes
        |> Le.groupsOf 2


type Shape
    = Paper
    | Rock
    | Scissors
    | None


symbolToShapes : String -> Shape
symbolToShapes s =
    case s of
        "A" ->
            Rock

        "B" ->
            Paper

        "C" ->
            Scissors

        "X" ->
            Rock

        "Y" ->
            Paper

        "Z" ->
            Scissors

        _ ->
            None


listShapes : List String -> List Shape
listShapes ls =
    List.map (\s -> symbolToShapes s) ls


-- transform List [Shape,Shape] to List (Shape,Shape)
transformLLStoLTS : List ( Shape, Shape )
transformLLStoLTS =
    List.map (\round -> ( Maybe.withDefault None (List.head round), Maybe.withDefault None (List.head (List.reverse round)) )) formatData

-- rule how to count points for Shape
scoresForShape : Shape -> Int
scoresForShape s = case s of
                        Paper -> 2
                        Rock -> 1
                        Scissors -> 3
                        None -> 1000

-- rule how to count points for Result of Round
scoresForResult : (Shape, Shape) -> Int
scoresForResult (x,y) = case (x,y) of
                            ( Rock, Rock ) -> 3

                            ( Paper, Paper ) -> 3

                            ( Scissors, Scissors ) ->  3

                            ( Rock, Paper ) -> 6

                            ( Rock, Scissors ) ->  0

                            ( Paper, Rock ) -> 0

                            ( Paper, Scissors ) -> 6

                            ( Scissors, Rock ) -> 6

                            ( Scissors, Paper ) -> 0

                            ( None, _ ) -> 1000

                            ( _, _ ) ->  1000


-- List of points collected in each round
pointsInEachRound : List Int
pointsInEachRound =
    List.map
        (\( opp, me ) ->
            case ( opp, me ) of
                ( Rock, Rock ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Paper, Paper ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Scissors, Scissors ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Rock, Paper ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Rock, Scissors ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Paper, Rock ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Paper, Scissors ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Scissors, Rock ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( Scissors, Paper ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( None, _ ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)

                ( _, _ ) -> (+) (scoresForResult (opp,me)) (scoresForShape me)
        )
        transformLLStoLTS


andTheWinnerIs : String
andTheWinnerIs = String.fromInt (List.sum pointsInEachRound)




